// Copyright 2017-2021 Demian Harvill
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.13.0
// source: DmlAst.proto

package dml

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DmlParameterModifier int32

const (
	DmlParameterModifier_PARAM_UNKNOWN  DmlParameterModifier = 0
	DmlParameterModifier_PARAM_REQUIRED DmlParameterModifier = 4
	DmlParameterModifier_PARAM_OPTIONAL DmlParameterModifier = 5
	DmlParameterModifier_PARAM_REPEATED DmlParameterModifier = 6
)

// Enum value maps for DmlParameterModifier.
var (
	DmlParameterModifier_name = map[int32]string{
		0: "PARAM_UNKNOWN",
		4: "PARAM_REQUIRED",
		5: "PARAM_OPTIONAL",
		6: "PARAM_REPEATED",
	}
	DmlParameterModifier_value = map[string]int32{
		"PARAM_UNKNOWN":  0,
		"PARAM_REQUIRED": 4,
		"PARAM_OPTIONAL": 5,
		"PARAM_REPEATED": 6,
	}
)

func (x DmlParameterModifier) Enum() *DmlParameterModifier {
	p := new(DmlParameterModifier)
	*p = x
	return p
}

func (x DmlParameterModifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DmlParameterModifier) Descriptor() protoreflect.EnumDescriptor {
	return file_DmlAst_proto_enumTypes[0].Descriptor()
}

func (DmlParameterModifier) Type() protoreflect.EnumType {
	return &file_DmlAst_proto_enumTypes[0]
}

func (x DmlParameterModifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DmlParameterModifier.Descriptor instead.
func (DmlParameterModifier) EnumDescriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{0}
}

type DmlFieldModifier int32

const (
	DmlFieldModifier_MODIFIER_UNKNOWN DmlFieldModifier = 0
	DmlFieldModifier_AUTO             DmlFieldModifier = 1
	DmlFieldModifier_ID               DmlFieldModifier = 2
	DmlFieldModifier_IDGEN            DmlFieldModifier = 3
	DmlFieldModifier_REQUIRED         DmlFieldModifier = 4
	DmlFieldModifier_OPTIONAL         DmlFieldModifier = 5
	DmlFieldModifier_REPEATED         DmlFieldModifier = 6
	DmlFieldModifier_MAP              DmlFieldModifier = 7
	DmlFieldModifier_LIST             DmlFieldModifier = 8
	DmlFieldModifier_VIRTUAL          DmlFieldModifier = 9
)

// Enum value maps for DmlFieldModifier.
var (
	DmlFieldModifier_name = map[int32]string{
		0: "MODIFIER_UNKNOWN",
		1: "AUTO",
		2: "ID",
		3: "IDGEN",
		4: "REQUIRED",
		5: "OPTIONAL",
		6: "REPEATED",
		7: "MAP",
		8: "LIST",
		9: "VIRTUAL",
	}
	DmlFieldModifier_value = map[string]int32{
		"MODIFIER_UNKNOWN": 0,
		"AUTO":             1,
		"ID":               2,
		"IDGEN":            3,
		"REQUIRED":         4,
		"OPTIONAL":         5,
		"REPEATED":         6,
		"MAP":              7,
		"LIST":             8,
		"VIRTUAL":          9,
	}
)

func (x DmlFieldModifier) Enum() *DmlFieldModifier {
	p := new(DmlFieldModifier)
	*p = x
	return p
}

func (x DmlFieldModifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DmlFieldModifier) Descriptor() protoreflect.EnumDescriptor {
	return file_DmlAst_proto_enumTypes[1].Descriptor()
}

func (DmlFieldModifier) Type() protoreflect.EnumType {
	return &file_DmlAst_proto_enumTypes[1]
}

func (x DmlFieldModifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DmlFieldModifier.Descriptor instead.
func (DmlFieldModifier) EnumDescriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{1}
}

type DmlIndexType int32

const (
	DmlIndexType_INDEX_TYPE_UNKNOWN DmlIndexType = 0
	DmlIndexType_PRIMARY            DmlIndexType = 1
	DmlIndexType_UNIQUE             DmlIndexType = 2
	DmlIndexType_NONUNIQUE          DmlIndexType = 3
)

// Enum value maps for DmlIndexType.
var (
	DmlIndexType_name = map[int32]string{
		0: "INDEX_TYPE_UNKNOWN",
		1: "PRIMARY",
		2: "UNIQUE",
		3: "NONUNIQUE",
	}
	DmlIndexType_value = map[string]int32{
		"INDEX_TYPE_UNKNOWN": 0,
		"PRIMARY":            1,
		"UNIQUE":             2,
		"NONUNIQUE":          3,
	}
)

func (x DmlIndexType) Enum() *DmlIndexType {
	p := new(DmlIndexType)
	*p = x
	return p
}

func (x DmlIndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DmlIndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_DmlAst_proto_enumTypes[2].Descriptor()
}

func (DmlIndexType) Type() protoreflect.EnumType {
	return &file_DmlAst_proto_enumTypes[2]
}

func (x DmlIndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DmlIndexType.Descriptor instead.
func (DmlIndexType) EnumDescriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{2}
}

type DmlPatternType int32

const (
	DmlPatternType_NONE   DmlPatternType = 0
	DmlPatternType_INSERT DmlPatternType = 1
	DmlPatternType_UPDATE DmlPatternType = 2
	DmlPatternType_SELECT DmlPatternType = 3
	DmlPatternType_DELETE DmlPatternType = 4
)

// Enum value maps for DmlPatternType.
var (
	DmlPatternType_name = map[int32]string{
		0: "NONE",
		1: "INSERT",
		2: "UPDATE",
		3: "SELECT",
		4: "DELETE",
	}
	DmlPatternType_value = map[string]int32{
		"NONE":   0,
		"INSERT": 1,
		"UPDATE": 2,
		"SELECT": 3,
		"DELETE": 4,
	}
)

func (x DmlPatternType) Enum() *DmlPatternType {
	p := new(DmlPatternType)
	*p = x
	return p
}

func (x DmlPatternType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DmlPatternType) Descriptor() protoreflect.EnumDescriptor {
	return file_DmlAst_proto_enumTypes[3].Descriptor()
}

func (DmlPatternType) Type() protoreflect.EnumType {
	return &file_DmlAst_proto_enumTypes[3]
}

func (x DmlPatternType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DmlPatternType.Descriptor instead.
func (DmlPatternType) EnumDescriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{3}
}

type DmlEnumValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnumValueName string   `protobuf:"bytes,1,opt,name=enum_value_name,json=enumValueName,proto3" json:"enum_value_name,omitempty"`
	Documentation []string `protobuf:"bytes,2,rep,name=documentation,proto3" json:"documentation,omitempty"`
	EnumValue     int32    `protobuf:"varint,3,opt,name=enum_value,json=enumValue,proto3" json:"enum_value,omitempty"`
}

func (x *DmlEnumValue) Reset() {
	*x = DmlEnumValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlEnumValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlEnumValue) ProtoMessage() {}

func (x *DmlEnumValue) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlEnumValue.ProtoReflect.Descriptor instead.
func (*DmlEnumValue) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{0}
}

func (x *DmlEnumValue) GetEnumValueName() string {
	if x != nil {
		return x.EnumValueName
	}
	return ""
}

func (x *DmlEnumValue) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *DmlEnumValue) GetEnumValue() int32 {
	if x != nil {
		return x.EnumValue
	}
	return 0
}

type DmlEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnumName      string          `protobuf:"bytes,1,opt,name=enum_name,json=enumName,proto3" json:"enum_name,omitempty"`
	Documentation []string        `protobuf:"bytes,2,rep,name=documentation,proto3" json:"documentation,omitempty"`
	Values        []*DmlEnumValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DmlEnum) Reset() {
	*x = DmlEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlEnum) ProtoMessage() {}

func (x *DmlEnum) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlEnum.ProtoReflect.Descriptor instead.
func (*DmlEnum) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{1}
}

func (x *DmlEnum) GetEnumName() string {
	if x != nil {
		return x.EnumName
	}
	return ""
}

func (x *DmlEnum) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *DmlEnum) GetValues() []*DmlEnumValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type DmlField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName          string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Documentation      []string `protobuf:"bytes,2,rep,name=documentation,proto3" json:"documentation,omitempty"`
	FieldType          string   `protobuf:"bytes,3,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"`
	FieldTypePackage   string   `protobuf:"bytes,4,opt,name=field_type_package,json=fieldTypePackage,proto3" json:"field_type_package,omitempty"`
	FieldTypeQualifier int32    `protobuf:"varint,5,opt,name=field_type_qualifier,json=fieldTypeQualifier,proto3" json:"field_type_qualifier,omitempty"`
	FieldValue         int32    `protobuf:"varint,6,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
}

func (x *DmlField) Reset() {
	*x = DmlField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlField) ProtoMessage() {}

func (x *DmlField) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlField.ProtoReflect.Descriptor instead.
func (*DmlField) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{2}
}

func (x *DmlField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *DmlField) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *DmlField) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *DmlField) GetFieldTypePackage() string {
	if x != nil {
		return x.FieldTypePackage
	}
	return ""
}

func (x *DmlField) GetFieldTypeQualifier() int32 {
	if x != nil {
		return x.FieldTypeQualifier
	}
	return 0
}

func (x *DmlField) GetFieldValue() int32 {
	if x != nil {
		return x.FieldValue
	}
	return 0
}

type DmlFieldSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldsetName        string      `protobuf:"bytes,1,opt,name=fieldset_name,json=fieldsetName,proto3" json:"fieldset_name,omitempty"`
	Documentation       []string    `protobuf:"bytes,2,rep,name=documentation,proto3" json:"documentation,omitempty"`
	Fields              []*DmlField `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	ExtendsFieldsetName string      `protobuf:"bytes,4,opt,name=extends_fieldset_name,json=extendsFieldsetName,proto3" json:"extends_fieldset_name,omitempty"`
}

func (x *DmlFieldSet) Reset() {
	*x = DmlFieldSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlFieldSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlFieldSet) ProtoMessage() {}

func (x *DmlFieldSet) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlFieldSet.ProtoReflect.Descriptor instead.
func (*DmlFieldSet) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{3}
}

func (x *DmlFieldSet) GetFieldsetName() string {
	if x != nil {
		return x.FieldsetName
	}
	return ""
}

func (x *DmlFieldSet) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *DmlFieldSet) GetFields() []*DmlField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DmlFieldSet) GetExtendsFieldsetName() string {
	if x != nil {
		return x.ExtendsFieldsetName
	}
	return ""
}

type DmlClassField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName       string           `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Modifier        DmlFieldModifier `protobuf:"varint,2,opt,name=modifier,proto3,enum=DML.DmlFieldModifier" json:"modifier,omitempty"`
	ReferencesClass string           `protobuf:"bytes,3,opt,name=references_class,json=referencesClass,proto3" json:"references_class,omitempty"`
	ReferencesField string           `protobuf:"bytes,4,opt,name=references_field,json=referencesField,proto3" json:"references_field,omitempty"`
}

func (x *DmlClassField) Reset() {
	*x = DmlClassField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlClassField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlClassField) ProtoMessage() {}

func (x *DmlClassField) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlClassField.ProtoReflect.Descriptor instead.
func (*DmlClassField) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{4}
}

func (x *DmlClassField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *DmlClassField) GetModifier() DmlFieldModifier {
	if x != nil {
		return x.Modifier
	}
	return DmlFieldModifier_MODIFIER_UNKNOWN
}

func (x *DmlClassField) GetReferencesClass() string {
	if x != nil {
		return x.ReferencesClass
	}
	return ""
}

func (x *DmlClassField) GetReferencesField() string {
	if x != nil {
		return x.ReferencesField
	}
	return ""
}

type DmlClassIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexType   DmlIndexType `protobuf:"varint,1,opt,name=index_type,json=indexType,proto3,enum=DML.DmlIndexType" json:"index_type,omitempty"`
	IndexFields []string     `protobuf:"bytes,2,rep,name=index_fields,json=indexFields,proto3" json:"index_fields,omitempty"`
}

func (x *DmlClassIndex) Reset() {
	*x = DmlClassIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlClassIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlClassIndex) ProtoMessage() {}

func (x *DmlClassIndex) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlClassIndex.ProtoReflect.Descriptor instead.
func (*DmlClassIndex) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{5}
}

func (x *DmlClassIndex) GetIndexType() DmlIndexType {
	if x != nil {
		return x.IndexType
	}
	return DmlIndexType_INDEX_TYPE_UNKNOWN
}

func (x *DmlClassIndex) GetIndexFields() []string {
	if x != nil {
		return x.IndexFields
	}
	return nil
}

type DmlClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName     string           `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Documentation []string         `protobuf:"bytes,2,rep,name=documentation,proto3" json:"documentation,omitempty"`
	FieldsetName  string           `protobuf:"bytes,3,opt,name=fieldset_name,json=fieldsetName,proto3" json:"fieldset_name,omitempty"`
	TableName     string           `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	IsAssociation bool             `protobuf:"varint,5,opt,name=is_association,json=isAssociation,proto3" json:"is_association,omitempty"`
	Fields        []*DmlClassField `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	Indexes       []*DmlClassIndex `protobuf:"bytes,7,rep,name=indexes,proto3" json:"indexes,omitempty"`
}

func (x *DmlClass) Reset() {
	*x = DmlClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlClass) ProtoMessage() {}

func (x *DmlClass) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlClass.ProtoReflect.Descriptor instead.
func (*DmlClass) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{6}
}

func (x *DmlClass) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *DmlClass) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *DmlClass) GetFieldsetName() string {
	if x != nil {
		return x.FieldsetName
	}
	return ""
}

func (x *DmlClass) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DmlClass) GetIsAssociation() bool {
	if x != nil {
		return x.IsAssociation
	}
	return false
}

func (x *DmlClass) GetFields() []*DmlClassField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DmlClass) GetIndexes() []*DmlClassIndex {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type DmlMethodParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modifier       DmlParameterModifier `protobuf:"varint,1,opt,name=modifier,proto3,enum=DML.DmlParameterModifier" json:"modifier,omitempty"`
	ParameterField string               `protobuf:"bytes,2,opt,name=parameter_field,json=parameterField,proto3" json:"parameter_field,omitempty"`
}

func (x *DmlMethodParam) Reset() {
	*x = DmlMethodParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlMethodParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlMethodParam) ProtoMessage() {}

func (x *DmlMethodParam) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlMethodParam.ProtoReflect.Descriptor instead.
func (*DmlMethodParam) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{7}
}

func (x *DmlMethodParam) GetModifier() DmlParameterModifier {
	if x != nil {
		return x.Modifier
	}
	return DmlParameterModifier_PARAM_UNKNOWN
}

func (x *DmlMethodParam) GetParameterField() string {
	if x != nil {
		return x.ParameterField
	}
	return ""
}

type DmlServiceMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodName          string            `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Documentation       []string          `protobuf:"bytes,2,rep,name=documentation,proto3" json:"documentation,omitempty"`
	InputFields         []*DmlMethodParam `protobuf:"bytes,3,rep,name=input_fields,json=inputFields,proto3" json:"input_fields,omitempty"`
	OutputFields        []*DmlMethodParam `protobuf:"bytes,4,rep,name=output_fields,json=outputFields,proto3" json:"output_fields,omitempty"`
	PatternType         DmlPatternType    `protobuf:"varint,5,opt,name=pattern_type,json=patternType,proto3,enum=DML.DmlPatternType" json:"pattern_type,omitempty"`
	PatternClass        string            `protobuf:"bytes,6,opt,name=pattern_class,json=patternClass,proto3" json:"pattern_class,omitempty"`
	PatternClassPackage string            `protobuf:"bytes,7,opt,name=pattern_class_package,json=patternClassPackage,proto3" json:"pattern_class_package,omitempty"`
}

func (x *DmlServiceMethod) Reset() {
	*x = DmlServiceMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlServiceMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlServiceMethod) ProtoMessage() {}

func (x *DmlServiceMethod) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlServiceMethod.ProtoReflect.Descriptor instead.
func (*DmlServiceMethod) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{8}
}

func (x *DmlServiceMethod) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *DmlServiceMethod) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *DmlServiceMethod) GetInputFields() []*DmlMethodParam {
	if x != nil {
		return x.InputFields
	}
	return nil
}

func (x *DmlServiceMethod) GetOutputFields() []*DmlMethodParam {
	if x != nil {
		return x.OutputFields
	}
	return nil
}

func (x *DmlServiceMethod) GetPatternType() DmlPatternType {
	if x != nil {
		return x.PatternType
	}
	return DmlPatternType_NONE
}

func (x *DmlServiceMethod) GetPatternClass() string {
	if x != nil {
		return x.PatternClass
	}
	return ""
}

func (x *DmlServiceMethod) GetPatternClassPackage() string {
	if x != nil {
		return x.PatternClassPackage
	}
	return ""
}

type DmlService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName   string              `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Documentation []string            `protobuf:"bytes,2,rep,name=documentation,proto3" json:"documentation,omitempty"`
	FieldsetName  string              `protobuf:"bytes,3,opt,name=fieldset_name,json=fieldsetName,proto3" json:"fieldset_name,omitempty"`
	Methods       []*DmlServiceMethod `protobuf:"bytes,5,rep,name=methods,proto3" json:"methods,omitempty"`
}

func (x *DmlService) Reset() {
	*x = DmlService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlService) ProtoMessage() {}

func (x *DmlService) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlService.ProtoReflect.Descriptor instead.
func (*DmlService) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{9}
}

func (x *DmlService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *DmlService) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *DmlService) GetFieldsetName() string {
	if x != nil {
		return x.FieldsetName
	}
	return ""
}

func (x *DmlService) GetMethods() []*DmlServiceMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

type DmlTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName      string         `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	ImportedPackages []string       `protobuf:"bytes,2,rep,name=imported_packages,json=importedPackages,proto3" json:"imported_packages,omitempty"`
	EnumList         []*DmlEnum     `protobuf:"bytes,3,rep,name=enum_list,json=enumList,proto3" json:"enum_list,omitempty"`
	FieldsetList     []*DmlFieldSet `protobuf:"bytes,4,rep,name=fieldset_list,json=fieldsetList,proto3" json:"fieldset_list,omitempty"`
	ClassList        []*DmlClass    `protobuf:"bytes,5,rep,name=class_list,json=classList,proto3" json:"class_list,omitempty"`
	ServiceList      []*DmlService  `protobuf:"bytes,6,rep,name=service_list,json=serviceList,proto3" json:"service_list,omitempty"`
	GoPackageName    string         `protobuf:"bytes,7,opt,name=go_package_name,json=goPackageName,proto3" json:"go_package_name,omitempty"`
}

func (x *DmlTree) Reset() {
	*x = DmlTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DmlAst_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlTree) ProtoMessage() {}

func (x *DmlTree) ProtoReflect() protoreflect.Message {
	mi := &file_DmlAst_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlTree.ProtoReflect.Descriptor instead.
func (*DmlTree) Descriptor() ([]byte, []int) {
	return file_DmlAst_proto_rawDescGZIP(), []int{10}
}

func (x *DmlTree) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *DmlTree) GetImportedPackages() []string {
	if x != nil {
		return x.ImportedPackages
	}
	return nil
}

func (x *DmlTree) GetEnumList() []*DmlEnum {
	if x != nil {
		return x.EnumList
	}
	return nil
}

func (x *DmlTree) GetFieldsetList() []*DmlFieldSet {
	if x != nil {
		return x.FieldsetList
	}
	return nil
}

func (x *DmlTree) GetClassList() []*DmlClass {
	if x != nil {
		return x.ClassList
	}
	return nil
}

func (x *DmlTree) GetServiceList() []*DmlService {
	if x != nil {
		return x.ServiceList
	}
	return nil
}

func (x *DmlTree) GetGoPackageName() string {
	if x != nil {
		return x.GoPackageName
	}
	return ""
}

var File_DmlAst_proto protoreflect.FileDescriptor

var file_DmlAst_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x44, 0x6d, 0x6c, 0x41, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x44, 0x4d, 0x4c, 0x22, 0x7b, 0x0a, 0x0c, 0x44, 0x6d, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e,
	0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x77, 0x0a, 0x07, 0x44, 0x6d, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x08, 0x44, 0x6d,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0b,
	0x44, 0x6d, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x44, 0x6d, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x64, 0x0a, 0x0d, 0x44,
	0x6d, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x94, 0x02, 0x0a, 0x08, 0x44, 0x6d, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x4d,
	0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x0e, 0x44, 0x6d, 0x6c, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x44,
	0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xdc, 0x02, 0x0a, 0x10, 0x44,
	0x6d, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44,
	0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x38,
	0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0a, 0x44, 0x6d,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x07, 0x44, 0x6d, 0x6c, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44, 0x4d, 0x4c, 0x2e, 0x44, 0x6d, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x4d, 0x4c, 0x2e,
	0x44, 0x6d, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x4d, 0x4c, 0x2e,
	0x44, 0x6d, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2a,
	0x65, 0x0a, 0x14, 0x44, 0x6d, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x8f, 0x01, 0x0a, 0x10, 0x44, 0x6d, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x44, 0x47, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x50, 0x10,
	0x07, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x09, 0x2a, 0x4e, 0x0a, 0x0c, 0x44, 0x6d, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x4e,
	0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x0e, 0x44, 0x6d, 0x6c, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x04, 0x42, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x6c, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x78, 0x64,
	0x6d, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x6d, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_DmlAst_proto_rawDescOnce sync.Once
	file_DmlAst_proto_rawDescData = file_DmlAst_proto_rawDesc
)

func file_DmlAst_proto_rawDescGZIP() []byte {
	file_DmlAst_proto_rawDescOnce.Do(func() {
		file_DmlAst_proto_rawDescData = protoimpl.X.CompressGZIP(file_DmlAst_proto_rawDescData)
	})
	return file_DmlAst_proto_rawDescData
}

var file_DmlAst_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_DmlAst_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_DmlAst_proto_goTypes = []interface{}{
	(DmlParameterModifier)(0), // 0: DML.DmlParameterModifier
	(DmlFieldModifier)(0),     // 1: DML.DmlFieldModifier
	(DmlIndexType)(0),         // 2: DML.DmlIndexType
	(DmlPatternType)(0),       // 3: DML.DmlPatternType
	(*DmlEnumValue)(nil),      // 4: DML.DmlEnumValue
	(*DmlEnum)(nil),           // 5: DML.DmlEnum
	(*DmlField)(nil),          // 6: DML.DmlField
	(*DmlFieldSet)(nil),       // 7: DML.DmlFieldSet
	(*DmlClassField)(nil),     // 8: DML.DmlClassField
	(*DmlClassIndex)(nil),     // 9: DML.DmlClassIndex
	(*DmlClass)(nil),          // 10: DML.DmlClass
	(*DmlMethodParam)(nil),    // 11: DML.DmlMethodParam
	(*DmlServiceMethod)(nil),  // 12: DML.DmlServiceMethod
	(*DmlService)(nil),        // 13: DML.DmlService
	(*DmlTree)(nil),           // 14: DML.DmlTree
}
var file_DmlAst_proto_depIdxs = []int32{
	4,  // 0: DML.DmlEnum.values:type_name -> DML.DmlEnumValue
	6,  // 1: DML.DmlFieldSet.fields:type_name -> DML.DmlField
	1,  // 2: DML.DmlClassField.modifier:type_name -> DML.DmlFieldModifier
	2,  // 3: DML.DmlClassIndex.index_type:type_name -> DML.DmlIndexType
	8,  // 4: DML.DmlClass.fields:type_name -> DML.DmlClassField
	9,  // 5: DML.DmlClass.indexes:type_name -> DML.DmlClassIndex
	0,  // 6: DML.DmlMethodParam.modifier:type_name -> DML.DmlParameterModifier
	11, // 7: DML.DmlServiceMethod.input_fields:type_name -> DML.DmlMethodParam
	11, // 8: DML.DmlServiceMethod.output_fields:type_name -> DML.DmlMethodParam
	3,  // 9: DML.DmlServiceMethod.pattern_type:type_name -> DML.DmlPatternType
	12, // 10: DML.DmlService.methods:type_name -> DML.DmlServiceMethod
	5,  // 11: DML.DmlTree.enum_list:type_name -> DML.DmlEnum
	7,  // 12: DML.DmlTree.fieldset_list:type_name -> DML.DmlFieldSet
	10, // 13: DML.DmlTree.class_list:type_name -> DML.DmlClass
	13, // 14: DML.DmlTree.service_list:type_name -> DML.DmlService
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_DmlAst_proto_init() }
func file_DmlAst_proto_init() {
	if File_DmlAst_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_DmlAst_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlEnumValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlFieldSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlClassField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlClassIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlMethodParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlServiceMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DmlAst_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DmlAst_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_DmlAst_proto_goTypes,
		DependencyIndexes: file_DmlAst_proto_depIdxs,
		EnumInfos:         file_DmlAst_proto_enumTypes,
		MessageInfos:      file_DmlAst_proto_msgTypes,
	}.Build()
	File_DmlAst_proto = out.File
	file_DmlAst_proto_rawDesc = nil
	file_DmlAst_proto_goTypes = nil
	file_DmlAst_proto_depIdxs = nil
}
