// Copyright 2017-2019 Demian Harvill
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: DmlAst.proto

/*
Package dml is a generated protocol buffer package.

It is generated from these files:
	DmlAst.proto

It has these top-level messages:
	DmlEnumValue
	DmlEnum
	DmlField
	DmlFieldSet
	DmlClassField
	DmlClassIndex
	DmlClass
	DmlMethodParam
	DmlServiceMethod
	DmlService
	DmlTree
*/
package dml

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DmlParameterModifier int32

const (
	DmlParameterModifier_PARAM_UNKNOWN  DmlParameterModifier = 0
	DmlParameterModifier_PARAM_REQUIRED DmlParameterModifier = 4
	DmlParameterModifier_PARAM_OPTIONAL DmlParameterModifier = 5
	DmlParameterModifier_PARAM_REPEATED DmlParameterModifier = 6
)

var DmlParameterModifier_name = map[int32]string{
	0: "PARAM_UNKNOWN",
	4: "PARAM_REQUIRED",
	5: "PARAM_OPTIONAL",
	6: "PARAM_REPEATED",
}
var DmlParameterModifier_value = map[string]int32{
	"PARAM_UNKNOWN":  0,
	"PARAM_REQUIRED": 4,
	"PARAM_OPTIONAL": 5,
	"PARAM_REPEATED": 6,
}

func (x DmlParameterModifier) String() string {
	return proto.EnumName(DmlParameterModifier_name, int32(x))
}
func (DmlParameterModifier) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DmlFieldModifier int32

const (
	DmlFieldModifier_MODIFIER_UNKNOWN DmlFieldModifier = 0
	DmlFieldModifier_AUTO             DmlFieldModifier = 1
	DmlFieldModifier_ID               DmlFieldModifier = 2
	DmlFieldModifier_IDGEN            DmlFieldModifier = 3
	DmlFieldModifier_REQUIRED         DmlFieldModifier = 4
	DmlFieldModifier_OPTIONAL         DmlFieldModifier = 5
	DmlFieldModifier_REPEATED         DmlFieldModifier = 6
	DmlFieldModifier_MAP              DmlFieldModifier = 7
	DmlFieldModifier_LIST             DmlFieldModifier = 8
	DmlFieldModifier_VIRTUAL          DmlFieldModifier = 9
)

var DmlFieldModifier_name = map[int32]string{
	0: "MODIFIER_UNKNOWN",
	1: "AUTO",
	2: "ID",
	3: "IDGEN",
	4: "REQUIRED",
	5: "OPTIONAL",
	6: "REPEATED",
	7: "MAP",
	8: "LIST",
	9: "VIRTUAL",
}
var DmlFieldModifier_value = map[string]int32{
	"MODIFIER_UNKNOWN": 0,
	"AUTO":             1,
	"ID":               2,
	"IDGEN":            3,
	"REQUIRED":         4,
	"OPTIONAL":         5,
	"REPEATED":         6,
	"MAP":              7,
	"LIST":             8,
	"VIRTUAL":          9,
}

func (x DmlFieldModifier) String() string {
	return proto.EnumName(DmlFieldModifier_name, int32(x))
}
func (DmlFieldModifier) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DmlIndexType int32

const (
	DmlIndexType_INDEX_TYPE_UNKNOWN DmlIndexType = 0
	DmlIndexType_PRIMARY            DmlIndexType = 1
	DmlIndexType_UNIQUE             DmlIndexType = 2
	DmlIndexType_NONUNIQUE          DmlIndexType = 3
)

var DmlIndexType_name = map[int32]string{
	0: "INDEX_TYPE_UNKNOWN",
	1: "PRIMARY",
	2: "UNIQUE",
	3: "NONUNIQUE",
}
var DmlIndexType_value = map[string]int32{
	"INDEX_TYPE_UNKNOWN": 0,
	"PRIMARY":            1,
	"UNIQUE":             2,
	"NONUNIQUE":          3,
}

func (x DmlIndexType) String() string {
	return proto.EnumName(DmlIndexType_name, int32(x))
}
func (DmlIndexType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DmlPatternType int32

const (
	DmlPatternType_NONE   DmlPatternType = 0
	DmlPatternType_INSERT DmlPatternType = 1
	DmlPatternType_UPDATE DmlPatternType = 2
	DmlPatternType_SELECT DmlPatternType = 3
	DmlPatternType_DELETE DmlPatternType = 4
)

var DmlPatternType_name = map[int32]string{
	0: "NONE",
	1: "INSERT",
	2: "UPDATE",
	3: "SELECT",
	4: "DELETE",
}
var DmlPatternType_value = map[string]int32{
	"NONE":   0,
	"INSERT": 1,
	"UPDATE": 2,
	"SELECT": 3,
	"DELETE": 4,
}

func (x DmlPatternType) String() string {
	return proto.EnumName(DmlPatternType_name, int32(x))
}
func (DmlPatternType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DmlEnumValue struct {
	EnumValueName string   `protobuf:"bytes,1,opt,name=enum_value_name,json=enumValueName" json:"enum_value_name,omitempty"`
	Documentation []string `protobuf:"bytes,2,rep,name=documentation" json:"documentation,omitempty"`
	EnumValue     int32    `protobuf:"varint,3,opt,name=enum_value,json=enumValue" json:"enum_value,omitempty"`
}

func (m *DmlEnumValue) Reset()                    { *m = DmlEnumValue{} }
func (m *DmlEnumValue) String() string            { return proto.CompactTextString(m) }
func (*DmlEnumValue) ProtoMessage()               {}
func (*DmlEnumValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DmlEnumValue) GetEnumValueName() string {
	if m != nil {
		return m.EnumValueName
	}
	return ""
}

func (m *DmlEnumValue) GetDocumentation() []string {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (m *DmlEnumValue) GetEnumValue() int32 {
	if m != nil {
		return m.EnumValue
	}
	return 0
}

type DmlEnum struct {
	EnumName      string          `protobuf:"bytes,1,opt,name=enum_name,json=enumName" json:"enum_name,omitempty"`
	Documentation []string        `protobuf:"bytes,2,rep,name=documentation" json:"documentation,omitempty"`
	Values        []*DmlEnumValue `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *DmlEnum) Reset()                    { *m = DmlEnum{} }
func (m *DmlEnum) String() string            { return proto.CompactTextString(m) }
func (*DmlEnum) ProtoMessage()               {}
func (*DmlEnum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DmlEnum) GetEnumName() string {
	if m != nil {
		return m.EnumName
	}
	return ""
}

func (m *DmlEnum) GetDocumentation() []string {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (m *DmlEnum) GetValues() []*DmlEnumValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type DmlField struct {
	FieldName          string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	Documentation      []string `protobuf:"bytes,2,rep,name=documentation" json:"documentation,omitempty"`
	FieldType          string   `protobuf:"bytes,3,opt,name=field_type,json=fieldType" json:"field_type,omitempty"`
	FieldTypePackage   string   `protobuf:"bytes,4,opt,name=field_type_package,json=fieldTypePackage" json:"field_type_package,omitempty"`
	FieldTypeQualifier int32    `protobuf:"varint,5,opt,name=field_type_qualifier,json=fieldTypeQualifier" json:"field_type_qualifier,omitempty"`
	FieldValue         int32    `protobuf:"varint,6,opt,name=field_value,json=fieldValue" json:"field_value,omitempty"`
}

func (m *DmlField) Reset()                    { *m = DmlField{} }
func (m *DmlField) String() string            { return proto.CompactTextString(m) }
func (*DmlField) ProtoMessage()               {}
func (*DmlField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DmlField) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *DmlField) GetDocumentation() []string {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (m *DmlField) GetFieldType() string {
	if m != nil {
		return m.FieldType
	}
	return ""
}

func (m *DmlField) GetFieldTypePackage() string {
	if m != nil {
		return m.FieldTypePackage
	}
	return ""
}

func (m *DmlField) GetFieldTypeQualifier() int32 {
	if m != nil {
		return m.FieldTypeQualifier
	}
	return 0
}

func (m *DmlField) GetFieldValue() int32 {
	if m != nil {
		return m.FieldValue
	}
	return 0
}

type DmlFieldSet struct {
	FieldsetName        string      `protobuf:"bytes,1,opt,name=fieldset_name,json=fieldsetName" json:"fieldset_name,omitempty"`
	Documentation       []string    `protobuf:"bytes,2,rep,name=documentation" json:"documentation,omitempty"`
	Fields              []*DmlField `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
	ExtendsFieldsetName string      `protobuf:"bytes,4,opt,name=extends_fieldset_name,json=extendsFieldsetName" json:"extends_fieldset_name,omitempty"`
}

func (m *DmlFieldSet) Reset()                    { *m = DmlFieldSet{} }
func (m *DmlFieldSet) String() string            { return proto.CompactTextString(m) }
func (*DmlFieldSet) ProtoMessage()               {}
func (*DmlFieldSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DmlFieldSet) GetFieldsetName() string {
	if m != nil {
		return m.FieldsetName
	}
	return ""
}

func (m *DmlFieldSet) GetDocumentation() []string {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (m *DmlFieldSet) GetFields() []*DmlField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *DmlFieldSet) GetExtendsFieldsetName() string {
	if m != nil {
		return m.ExtendsFieldsetName
	}
	return ""
}

type DmlClassField struct {
	FieldName       string           `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	Modifier        DmlFieldModifier `protobuf:"varint,2,opt,name=modifier,enum=DML.DmlFieldModifier" json:"modifier,omitempty"`
	ReferencesClass string           `protobuf:"bytes,3,opt,name=references_class,json=referencesClass" json:"references_class,omitempty"`
	ReferencesField string           `protobuf:"bytes,4,opt,name=references_field,json=referencesField" json:"references_field,omitempty"`
}

func (m *DmlClassField) Reset()                    { *m = DmlClassField{} }
func (m *DmlClassField) String() string            { return proto.CompactTextString(m) }
func (*DmlClassField) ProtoMessage()               {}
func (*DmlClassField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DmlClassField) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *DmlClassField) GetModifier() DmlFieldModifier {
	if m != nil {
		return m.Modifier
	}
	return DmlFieldModifier_MODIFIER_UNKNOWN
}

func (m *DmlClassField) GetReferencesClass() string {
	if m != nil {
		return m.ReferencesClass
	}
	return ""
}

func (m *DmlClassField) GetReferencesField() string {
	if m != nil {
		return m.ReferencesField
	}
	return ""
}

type DmlClassIndex struct {
	IndexType   DmlIndexType `protobuf:"varint,1,opt,name=index_type,json=indexType,enum=DML.DmlIndexType" json:"index_type,omitempty"`
	IndexFields []string     `protobuf:"bytes,2,rep,name=index_fields,json=indexFields" json:"index_fields,omitempty"`
}

func (m *DmlClassIndex) Reset()                    { *m = DmlClassIndex{} }
func (m *DmlClassIndex) String() string            { return proto.CompactTextString(m) }
func (*DmlClassIndex) ProtoMessage()               {}
func (*DmlClassIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DmlClassIndex) GetIndexType() DmlIndexType {
	if m != nil {
		return m.IndexType
	}
	return DmlIndexType_INDEX_TYPE_UNKNOWN
}

func (m *DmlClassIndex) GetIndexFields() []string {
	if m != nil {
		return m.IndexFields
	}
	return nil
}

type DmlClass struct {
	ClassName     string           `protobuf:"bytes,1,opt,name=class_name,json=className" json:"class_name,omitempty"`
	Documentation []string         `protobuf:"bytes,2,rep,name=documentation" json:"documentation,omitempty"`
	FieldsetName  string           `protobuf:"bytes,3,opt,name=fieldset_name,json=fieldsetName" json:"fieldset_name,omitempty"`
	TableName     string           `protobuf:"bytes,4,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	IsAssociation bool             `protobuf:"varint,5,opt,name=is_association,json=isAssociation" json:"is_association,omitempty"`
	Fields        []*DmlClassField `protobuf:"bytes,6,rep,name=fields" json:"fields,omitempty"`
	Indexes       []*DmlClassIndex `protobuf:"bytes,7,rep,name=indexes" json:"indexes,omitempty"`
}

func (m *DmlClass) Reset()                    { *m = DmlClass{} }
func (m *DmlClass) String() string            { return proto.CompactTextString(m) }
func (*DmlClass) ProtoMessage()               {}
func (*DmlClass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DmlClass) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *DmlClass) GetDocumentation() []string {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (m *DmlClass) GetFieldsetName() string {
	if m != nil {
		return m.FieldsetName
	}
	return ""
}

func (m *DmlClass) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *DmlClass) GetIsAssociation() bool {
	if m != nil {
		return m.IsAssociation
	}
	return false
}

func (m *DmlClass) GetFields() []*DmlClassField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *DmlClass) GetIndexes() []*DmlClassIndex {
	if m != nil {
		return m.Indexes
	}
	return nil
}

type DmlMethodParam struct {
	Modifier       DmlParameterModifier `protobuf:"varint,1,opt,name=modifier,enum=DML.DmlParameterModifier" json:"modifier,omitempty"`
	ParameterField string               `protobuf:"bytes,2,opt,name=parameter_field,json=parameterField" json:"parameter_field,omitempty"`
}

func (m *DmlMethodParam) Reset()                    { *m = DmlMethodParam{} }
func (m *DmlMethodParam) String() string            { return proto.CompactTextString(m) }
func (*DmlMethodParam) ProtoMessage()               {}
func (*DmlMethodParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DmlMethodParam) GetModifier() DmlParameterModifier {
	if m != nil {
		return m.Modifier
	}
	return DmlParameterModifier_PARAM_UNKNOWN
}

func (m *DmlMethodParam) GetParameterField() string {
	if m != nil {
		return m.ParameterField
	}
	return ""
}

type DmlServiceMethod struct {
	MethodName          string            `protobuf:"bytes,1,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	Documentation       []string          `protobuf:"bytes,2,rep,name=documentation" json:"documentation,omitempty"`
	InputFields         []*DmlMethodParam `protobuf:"bytes,3,rep,name=input_fields,json=inputFields" json:"input_fields,omitempty"`
	OutputFields        []*DmlMethodParam `protobuf:"bytes,4,rep,name=output_fields,json=outputFields" json:"output_fields,omitempty"`
	PatternType         DmlPatternType    `protobuf:"varint,5,opt,name=pattern_type,json=patternType,enum=DML.DmlPatternType" json:"pattern_type,omitempty"`
	PatternClass        string            `protobuf:"bytes,6,opt,name=pattern_class,json=patternClass" json:"pattern_class,omitempty"`
	PatternClassPackage string            `protobuf:"bytes,7,opt,name=pattern_class_package,json=patternClassPackage" json:"pattern_class_package,omitempty"`
}

func (m *DmlServiceMethod) Reset()                    { *m = DmlServiceMethod{} }
func (m *DmlServiceMethod) String() string            { return proto.CompactTextString(m) }
func (*DmlServiceMethod) ProtoMessage()               {}
func (*DmlServiceMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DmlServiceMethod) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *DmlServiceMethod) GetDocumentation() []string {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (m *DmlServiceMethod) GetInputFields() []*DmlMethodParam {
	if m != nil {
		return m.InputFields
	}
	return nil
}

func (m *DmlServiceMethod) GetOutputFields() []*DmlMethodParam {
	if m != nil {
		return m.OutputFields
	}
	return nil
}

func (m *DmlServiceMethod) GetPatternType() DmlPatternType {
	if m != nil {
		return m.PatternType
	}
	return DmlPatternType_NONE
}

func (m *DmlServiceMethod) GetPatternClass() string {
	if m != nil {
		return m.PatternClass
	}
	return ""
}

func (m *DmlServiceMethod) GetPatternClassPackage() string {
	if m != nil {
		return m.PatternClassPackage
	}
	return ""
}

type DmlService struct {
	ServiceName   string              `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	Documentation []string            `protobuf:"bytes,2,rep,name=documentation" json:"documentation,omitempty"`
	FieldsetName  string              `protobuf:"bytes,3,opt,name=fieldset_name,json=fieldsetName" json:"fieldset_name,omitempty"`
	Methods       []*DmlServiceMethod `protobuf:"bytes,5,rep,name=methods" json:"methods,omitempty"`
}

func (m *DmlService) Reset()                    { *m = DmlService{} }
func (m *DmlService) String() string            { return proto.CompactTextString(m) }
func (*DmlService) ProtoMessage()               {}
func (*DmlService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DmlService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *DmlService) GetDocumentation() []string {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (m *DmlService) GetFieldsetName() string {
	if m != nil {
		return m.FieldsetName
	}
	return ""
}

func (m *DmlService) GetMethods() []*DmlServiceMethod {
	if m != nil {
		return m.Methods
	}
	return nil
}

type DmlTree struct {
	PackageName      string         `protobuf:"bytes,1,opt,name=package_name,json=packageName" json:"package_name,omitempty"`
	ImportedPackages []string       `protobuf:"bytes,2,rep,name=imported_packages,json=importedPackages" json:"imported_packages,omitempty"`
	EnumList         []*DmlEnum     `protobuf:"bytes,3,rep,name=enum_list,json=enumList" json:"enum_list,omitempty"`
	FieldsetList     []*DmlFieldSet `protobuf:"bytes,4,rep,name=fieldset_list,json=fieldsetList" json:"fieldset_list,omitempty"`
	ClassList        []*DmlClass    `protobuf:"bytes,5,rep,name=class_list,json=classList" json:"class_list,omitempty"`
	ServiceList      []*DmlService  `protobuf:"bytes,6,rep,name=service_list,json=serviceList" json:"service_list,omitempty"`
}

func (m *DmlTree) Reset()                    { *m = DmlTree{} }
func (m *DmlTree) String() string            { return proto.CompactTextString(m) }
func (*DmlTree) ProtoMessage()               {}
func (*DmlTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DmlTree) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *DmlTree) GetImportedPackages() []string {
	if m != nil {
		return m.ImportedPackages
	}
	return nil
}

func (m *DmlTree) GetEnumList() []*DmlEnum {
	if m != nil {
		return m.EnumList
	}
	return nil
}

func (m *DmlTree) GetFieldsetList() []*DmlFieldSet {
	if m != nil {
		return m.FieldsetList
	}
	return nil
}

func (m *DmlTree) GetClassList() []*DmlClass {
	if m != nil {
		return m.ClassList
	}
	return nil
}

func (m *DmlTree) GetServiceList() []*DmlService {
	if m != nil {
		return m.ServiceList
	}
	return nil
}

func init() {
	proto.RegisterType((*DmlEnumValue)(nil), "DML.DmlEnumValue")
	proto.RegisterType((*DmlEnum)(nil), "DML.DmlEnum")
	proto.RegisterType((*DmlField)(nil), "DML.DmlField")
	proto.RegisterType((*DmlFieldSet)(nil), "DML.DmlFieldSet")
	proto.RegisterType((*DmlClassField)(nil), "DML.DmlClassField")
	proto.RegisterType((*DmlClassIndex)(nil), "DML.DmlClassIndex")
	proto.RegisterType((*DmlClass)(nil), "DML.DmlClass")
	proto.RegisterType((*DmlMethodParam)(nil), "DML.DmlMethodParam")
	proto.RegisterType((*DmlServiceMethod)(nil), "DML.DmlServiceMethod")
	proto.RegisterType((*DmlService)(nil), "DML.DmlService")
	proto.RegisterType((*DmlTree)(nil), "DML.DmlTree")
	proto.RegisterEnum("DML.DmlParameterModifier", DmlParameterModifier_name, DmlParameterModifier_value)
	proto.RegisterEnum("DML.DmlFieldModifier", DmlFieldModifier_name, DmlFieldModifier_value)
	proto.RegisterEnum("DML.DmlIndexType", DmlIndexType_name, DmlIndexType_value)
	proto.RegisterEnum("DML.DmlPatternType", DmlPatternType_name, DmlPatternType_value)
}

func init() { proto.RegisterFile("DmlAst.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1078 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x72, 0xe3, 0x44,
	0x10, 0x5e, 0x59, 0xf1, 0x5f, 0xdb, 0x4e, 0x26, 0x93, 0x04, 0x4c, 0x51, 0x29, 0x82, 0x61, 0x21,
	0x1b, 0x52, 0x61, 0x09, 0xb5, 0x5b, 0x5c, 0xc5, 0x4a, 0xa1, 0x04, 0xb6, 0xec, 0xc8, 0xf2, 0xc2,
	0x72, 0x71, 0x69, 0xed, 0x49, 0x50, 0x21, 0xd9, 0x42, 0x92, 0x97, 0xdd, 0xe2, 0x21, 0xb8, 0x70,
	0xe5, 0x09, 0x38, 0x72, 0xe0, 0x65, 0x78, 0x07, 0x5e, 0x81, 0x9a, 0x9e, 0x91, 0x34, 0x5a, 0x42,
	0x15, 0xae, 0xe2, 0x36, 0xee, 0xfe, 0x7a, 0xba, 0xfb, 0xeb, 0x6f, 0x5a, 0x86, 0xae, 0x19, 0x85,
	0x46, 0x9a, 0x5d, 0xc4, 0xc9, 0x3a, 0x5b, 0x53, 0xdd, 0x1c, 0x0d, 0x07, 0x3f, 0xa1, 0xd1, 0x5a,
	0x6d, 0xa2, 0xa7, 0x7e, 0xb8, 0x61, 0xf4, 0x03, 0xd8, 0x63, 0xab, 0x4d, 0x34, 0x7f, 0xc1, 0x7f,
	0xcd, 0x57, 0x7e, 0xc4, 0xfa, 0xda, 0x89, 0x76, 0xda, 0x76, 0x7b, 0x2c, 0xc7, 0x38, 0x7e, 0xc4,
	0xe8, 0xfb, 0xd0, 0x5b, 0xae, 0x17, 0x9b, 0x88, 0xad, 0x32, 0x3f, 0x0b, 0xd6, 0xab, 0x7e, 0xed,
	0x44, 0xe7, 0xa8, 0x8a, 0x91, 0x1e, 0x03, 0x94, 0xb7, 0xf5, 0xf5, 0x13, 0xed, 0xb4, 0xee, 0xb6,
	0x8b, 0x8b, 0x06, 0x3f, 0x42, 0x53, 0x26, 0xa7, 0x6f, 0x03, 0xda, 0xd5, 0x8c, 0x2d, 0x6e, 0xd8,
	0x22, 0xd9, 0x03, 0x68, 0x60, 0x9e, 0xb4, 0xaf, 0x9f, 0xe8, 0xa7, 0x9d, 0xcb, 0xfd, 0x0b, 0x73,
	0x34, 0xbc, 0x50, 0xbb, 0x73, 0x25, 0x60, 0xf0, 0x97, 0x06, 0x2d, 0x33, 0x0a, 0xaf, 0x02, 0x16,
	0x2e, 0x79, 0x91, 0x37, 0xfc, 0xa0, 0xe6, 0x6e, 0xa3, 0x65, 0xbb, 0x4e, 0xc5, 0x25, 0xd9, 0xab,
	0x58, 0x74, 0x9a, 0x5f, 0xe2, 0xbd, 0x8a, 0x19, 0x3d, 0x07, 0x5a, 0xba, 0xe7, 0xb1, 0xbf, 0xf8,
	0xde, 0xbf, 0x65, 0xfd, 0x1d, 0x84, 0x91, 0x02, 0x36, 0x11, 0x76, 0xfa, 0x10, 0x0e, 0x15, 0xf4,
	0x0f, 0x1b, 0x3f, 0x0c, 0x6e, 0x02, 0x96, 0xf4, 0xeb, 0x48, 0x20, 0x2d, 0xf0, 0xd7, 0xb9, 0x87,
	0xbe, 0x03, 0x1d, 0x11, 0x21, 0x98, 0x6e, 0x20, 0x50, 0x54, 0x24, 0xa8, 0xfe, 0x5d, 0x83, 0x4e,
	0xde, 0xf1, 0x94, 0x65, 0xf4, 0x3d, 0xe8, 0xa1, 0x37, 0x65, 0x99, 0xda, 0x77, 0x37, 0x37, 0x6e,
	0xd1, 0xfa, 0x7d, 0x68, 0x88, 0x28, 0xc9, 0x7b, 0x2f, 0xe7, 0x1d, 0x93, 0xb9, 0xd2, 0x49, 0x2f,
	0xe1, 0x88, 0xbd, 0xcc, 0xd8, 0x6a, 0x99, 0xce, 0xab, 0x99, 0x05, 0x0b, 0x07, 0xd2, 0x79, 0xa5,
	0x14, 0x30, 0xf8, 0x43, 0x83, 0x9e, 0x19, 0x85, 0x4f, 0x42, 0x3f, 0x4d, 0xff, 0xd3, 0xb0, 0x3e,
	0x81, 0x56, 0xb4, 0x5e, 0x0a, 0xb6, 0x6a, 0x27, 0xda, 0xe9, 0xee, 0xe5, 0x51, 0xa5, 0x9a, 0x91,
	0x74, 0xba, 0x05, 0x8c, 0x3e, 0x00, 0x92, 0xb0, 0x1b, 0x96, 0xb0, 0xd5, 0x82, 0xa5, 0xf3, 0x05,
	0x4f, 0x25, 0xe7, 0xb7, 0x57, 0xda, 0xb1, 0x82, 0xd7, 0xa0, 0x98, 0x55, 0x56, 0xaf, 0x40, 0x31,
	0xcf, 0x60, 0x59, 0x16, 0x6e, 0xaf, 0x96, 0xec, 0x25, 0x7d, 0x08, 0x10, 0xf0, 0x83, 0x10, 0x88,
	0x86, 0xb5, 0x15, 0x0a, 0x45, 0x08, 0x9f, 0xa8, 0xdb, 0x0e, 0xf2, 0x23, 0x7d, 0x17, 0xba, 0x22,
	0x42, 0xb2, 0x2b, 0xc8, 0xef, 0xa0, 0x4d, 0xb0, 0x34, 0xf8, 0xa5, 0x86, 0x3a, 0x16, 0xd5, 0x1d,
	0x03, 0x60, 0xf5, 0x15, 0x6a, 0xd0, 0xb2, 0xc5, 0x30, 0xff, 0xa1, 0x0b, 0xfd, 0x0e, 0x5d, 0x1c,
	0x03, 0x64, 0xfe, 0xf3, 0x90, 0xa9, 0xf3, 0x6b, 0xa3, 0x05, 0xdd, 0xf7, 0x61, 0x37, 0x48, 0xe7,
	0x7e, 0x9a, 0xae, 0x17, 0x81, 0x48, 0xc5, 0x85, 0xdb, 0x72, 0x7b, 0x41, 0x6a, 0x94, 0x46, 0x7a,
	0x56, 0xe8, 0xa6, 0x81, 0xba, 0xa1, 0x39, 0x1b, 0xe5, 0xb8, 0x0b, 0xf1, 0x9c, 0x43, 0x13, 0xfb,
	0x66, 0x69, 0xbf, 0x79, 0x07, 0x18, 0xf9, 0x73, 0x73, 0xc8, 0x20, 0x86, 0x5d, 0x33, 0x0a, 0x47,
	0x2c, 0xfb, 0x6e, 0xbd, 0x9c, 0xf8, 0x89, 0x1f, 0xd1, 0x47, 0x8a, 0x2e, 0x04, 0xf7, 0x6f, 0xe5,
	0x17, 0x20, 0x80, 0x65, 0x2c, 0xb9, 0x43, 0x1b, 0x1f, 0xc2, 0x5e, 0x9c, 0xbb, 0xe5, 0xbc, 0x6b,
	0xd8, 0xed, 0x6e, 0x61, 0x16, 0xe3, 0xfe, 0xb3, 0x06, 0xc4, 0x8c, 0xc2, 0x29, 0x4b, 0x5e, 0x04,
	0x0b, 0x26, 0x32, 0xf3, 0x47, 0x19, 0xe1, 0x49, 0x9d, 0x08, 0x08, 0xd3, 0x16, 0x23, 0x79, 0xcc,
	0x75, 0x10, 0x6f, 0xb2, 0x79, 0xe5, 0x95, 0x1d, 0xe4, 0xf5, 0x2b, 0x6d, 0x72, 0x71, 0xc4, 0x9b,
	0x4c, 0x88, 0x83, 0x7e, 0x06, 0xbd, 0xf5, 0x26, 0x53, 0x02, 0x77, 0xfe, 0x3d, 0xb0, 0x2b, 0x90,
	0x32, 0xf2, 0x31, 0x74, 0x63, 0x3f, 0xcb, 0x58, 0xb2, 0x12, 0x6a, 0xad, 0x23, 0x63, 0x07, 0x25,
	0x63, 0xe8, 0x43, 0xbd, 0x76, 0xe2, 0xf2, 0x07, 0x17, 0x4f, 0x1e, 0x27, 0xde, 0x51, 0x43, 0x88,
	0x47, 0x1a, 0x85, 0x4c, 0x2f, 0xe1, 0xa8, 0x02, 0x2a, 0xb6, 0x61, 0x53, 0xec, 0x01, 0x15, 0x2c,
	0x17, 0xe2, 0xe0, 0x37, 0x0d, 0xa0, 0xa4, 0x97, 0xbf, 0x8c, 0x54, 0x1c, 0x55, 0x66, 0x3b, 0xd2,
	0xf6, 0x7f, 0xab, 0xfd, 0x63, 0x68, 0x8a, 0x99, 0xa5, 0xfd, 0x3a, 0x32, 0x58, 0xac, 0x94, 0xca,
	0xb8, 0xdd, 0x1c, 0x35, 0xf8, 0xb5, 0x86, 0xdf, 0x35, 0x2f, 0x61, 0x58, 0xaa, 0xec, 0xaf, 0x52,
	0xaa, 0xb4, 0xe1, 0xfd, 0x1f, 0xc1, 0x7e, 0x10, 0xc5, 0xeb, 0x24, 0x63, 0xcb, 0x9c, 0x8b, 0xfc,
	0xb1, 0x93, 0xdc, 0x21, 0x89, 0xe0, 0x2b, 0x48, 0x7c, 0x27, 0xc3, 0x20, 0xcd, 0xa4, 0x12, 0xba,
	0xea, 0x77, 0x4e, 0x7c, 0x35, 0x87, 0x41, 0x9a, 0xd1, 0x47, 0x4a, 0x73, 0x08, 0x17, 0xf3, 0x27,
	0x95, 0x85, 0x38, 0x65, 0x59, 0xd9, 0x2e, 0x86, 0x9d, 0xe7, 0x6b, 0x04, 0x63, 0xea, 0xd5, 0x95,
	0x8e, 0x53, 0x91, 0x5b, 0x05, 0xd1, 0x97, 0xe5, 0x28, 0x10, 0x2f, 0x9e, 0xf2, 0xde, 0x6b, 0x0c,
	0x15, 0xb3, 0xe1, 0x31, 0x67, 0x0c, 0x0e, 0xef, 0x7a, 0x77, 0x74, 0x1f, 0x7a, 0x13, 0xc3, 0x35,
	0x46, 0xf3, 0x99, 0xf3, 0x95, 0x33, 0xfe, 0xda, 0x21, 0xf7, 0x28, 0x85, 0x5d, 0x61, 0x72, 0xad,
	0xeb, 0x99, 0xed, 0x5a, 0x26, 0xd9, 0x29, 0x6d, 0xe3, 0x89, 0x67, 0x8f, 0x1d, 0x63, 0x48, 0xea,
	0x2a, 0x6e, 0x62, 0x19, 0x9e, 0x65, 0x92, 0xc6, 0xd9, 0xcf, 0x1a, 0xbe, 0xc9, 0xca, 0xde, 0xa7,
	0x87, 0x40, 0x46, 0x63, 0xd3, 0xbe, 0xb2, 0x2d, 0x57, 0x49, 0xd3, 0x82, 0x1d, 0x63, 0xe6, 0x8d,
	0x89, 0x46, 0x1b, 0x50, 0xb3, 0x4d, 0x52, 0xa3, 0x6d, 0xa8, 0xdb, 0xe6, 0x17, 0x96, 0x43, 0x74,
	0xda, 0x85, 0x96, 0x92, 0xbd, 0x0b, 0x2d, 0x25, 0x2f, 0xfa, 0xf2, 0x8c, 0xb4, 0x09, 0xfa, 0xc8,
	0x98, 0x90, 0x26, 0xbf, 0x6f, 0x68, 0x4f, 0x3d, 0xd2, 0xa2, 0x1d, 0x68, 0x3e, 0xb5, 0x5d, 0x6f,
	0x66, 0x0c, 0x49, 0xfb, 0xcc, 0xc1, 0x3f, 0x5b, 0xc5, 0xb2, 0xa7, 0x6f, 0x00, 0xb5, 0x1d, 0xd3,
	0xfa, 0x66, 0xee, 0x3d, 0x9b, 0x58, 0x4a, 0x39, 0x1d, 0x68, 0x4e, 0x5c, 0x7b, 0x64, 0xb8, 0xcf,
	0x88, 0x46, 0x01, 0x1a, 0x33, 0xc7, 0xbe, 0x9e, 0x59, 0xa4, 0x46, 0x7b, 0xd0, 0x76, 0xc6, 0x8e,
	0xfc, 0xa9, 0x9f, 0x7d, 0x89, 0x7b, 0x4e, 0x79, 0x8e, 0x3c, 0xb1, 0x33, 0x76, 0x2c, 0x72, 0x8f,
	0x87, 0xd9, 0xce, 0xd4, 0x72, 0x3d, 0x79, 0xc5, 0xc4, 0x34, 0x3c, 0x7e, 0x05, 0x40, 0x63, 0x6a,
	0x0d, 0xad, 0x27, 0x1e, 0xd1, 0xf9, 0xd9, 0xb4, 0x86, 0x96, 0x67, 0x91, 0x9d, 0xcf, 0xdf, 0x04,
	0xb2, 0x4e, 0x6e, 0x2f, 0x6e, 0xfd, 0x8c, 0x25, 0xfe, 0x82, 0x5d, 0x2c, 0xa3, 0xf0, 0x5b, 0x7d,
	0x19, 0x85, 0xcf, 0x1b, 0xf8, 0x6f, 0xf1, 0xd3, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xd0,
	0x93, 0xe3, 0x3d, 0x0a, 0x00, 0x00,
}
